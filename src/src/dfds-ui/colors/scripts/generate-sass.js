/* eslint-disable no-console */
const path = require('path')
const util = require('util')
const rimraf = require('rimraf')
const chalk = require('chalk')
const fse = require('fs-extra')
const humps = require('humps')
const prettier = require('prettier')

const cjsPath = path.resolve(__dirname, '../dist/cjs')

// In order to generate the sass file we need the cjs build to be in place. Here we check if the cjs build exists.
if (!fse.pathExistsSync(cjsPath)) {
  console.log(chalk.red(`cjs folder does not exist. Please run build before generate-sass`))
  process.exit()
}

const colorPalette = require(cjsPath).colorPalette
const outPath = path.resolve(__dirname, '../dist/sass')

const EOL = '\r\n'

const rimrafp = util.promisify(rimraf)
const kebabCase = (string) => humps.decamelize(string, { separator: '-' })

/**
 * Generates a sass file with color variables definitions
 */
async function generate() {
  await rimrafp(outPath)

  const outFile = path.resolve(outPath, './colors.scss')

  console.log(chalk.green(`Generating ${outFile}`))

  const lines = generateLines(colorPalette)
  lines.unshift('/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */')

  const content = await prettierFormat(lines.join(EOL))
  await fse.outputFile(outFile, content, 'utf8')
}

/**
 * Generates an array of sass formatted color names and their values for each entry in palette
 * eg.: $color-red: #ff0000 !default;
 */
function generateLines(palette) {
  return Object.entries(palette).reduce((lines, [paletteName, colors]) => {
    lines.push(`/* ${paletteName} */`)
    lines.push(...generateColorLines(colors))
    return lines
  }, [])
}

/**
 * Generates an array of sass formatted color names and their values
 * eg.: $color-red: #ff0000 !default;
 */
function generateColorLines(colors) {
  return Object.entries(colors).map(
    ([colorName, colorValue]) => `$color-${kebabCase(colorName)}: ${colorValue || 'inherit'} !default;`
  )
}

/**
 * Format using Prettier
 */
async function prettierFormat(string) {
  const prettierConfig = await prettier.resolveConfig(process.cwd())
  return prettier.format(string, { parser: 'scss', ...prettierConfig })
}

if (require.main === module) {
  generate().catch((ex) => {
    console.log(chalk.red('Failed to generate file'))
    console.log(ex)
  })
}

module.export = generate
